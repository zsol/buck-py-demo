# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under both the MIT license found in the
# LICENSE-MIT file in the root directory of this source tree and the Apache
# License, Version 2.0 found in the LICENSE-APACHE file in the root directory
# of this source tree.

load("constants.bxl", "ANDROID", "CLANG", "CXXFLAGS", "CXXPPFLAGS", "LANGUAGE_STANDARD", "LDFLAGS", "TOOLSET", "VS2019", "VS2022")
load("flags_parser_utils.bxl", "get_compiler_settings_from_flags", "get_linker_settings_from_flags")
load("get_compiler_settings.bxl", "gen_compiler_settings")
load("get_linker_settings.bxl", "gen_linker_settings")
load("utils.bxl", "dedupe_by_value", "get_mode_config_path", "h")

# Query all the flags in advcance because the flags must be queried with string literal(e.g. "cxx_#default") but not variables
STD_CXXPPFLAGS = read_root_config("cxx_#default", "cxxppflags") or ""
STD_CXXFLAGS = read_root_config("cxx_#default", "cxxflags") or ""
STD_LDFLAGS = read_root_config("cxx_#default", "ldflags") or ""

ANDROID_CXXPPFLAGS = read_root_config("fbcode-platform-cxx#platform010-clang", "cxxppflags") or ""
ANDROID_CXXFLAGS = read_root_config("fbcode-platform-cxx#platform010-clang", "cxxflags") or ""
ANDROID_LDFLAGS = read_root_config("fbcode-platform-cxx#platform010-clang", "ldflags") or ""

# @unsorted-dict-items
LANGUAGE_STANDARD_AND_TOOLSET_MAP = {
    ANDROID: {
        CXXFLAGS: ANDROID_CXXFLAGS,
        CXXPPFLAGS: ANDROID_CXXPPFLAGS,
        LDFLAGS: ANDROID_LDFLAGS,
        LANGUAGE_STANDARD: None,
        TOOLSET: "Clang_5_0",
    },
    CLANG: {
        CXXFLAGS: STD_CXXFLAGS,
        CXXPPFLAGS: STD_CXXPPFLAGS,
        LDFLAGS: STD_LDFLAGS,
        LANGUAGE_STANDARD: "stdcpp20",
        TOOLSET: "ClangCL",
    },
    VS2019: {
        CXXFLAGS: STD_CXXFLAGS,
        CXXPPFLAGS: STD_CXXPPFLAGS,
        LDFLAGS: STD_LDFLAGS,
        LANGUAGE_STANDARD: "stdcpp17",
        TOOLSET: "v142",
    },
    VS2022: {
        CXXFLAGS: STD_CXXFLAGS,
        CXXPPFLAGS: STD_CXXPPFLAGS,
        LDFLAGS: STD_LDFLAGS,
        LANGUAGE_STANDARD: "stdcpp20",
        TOOLSET: "v143",
    },
}

ABSOLUTIZE_PATH_EXE = "prelude//ide_integrations/visual_studio:absolutize_path_exe"
VS_BUCK_BUILD_PROPS = "prelude//ide_integrations/visual_studio:vs_buck_build_props"

def _get_platform(vs_version: str) -> str:
    if "android" in (read_root_config("build", "default_target_platform") or ""):
        return "android"
    elif "clang" in (read_root_config("cxx_#default", "cxx_type") or ""):
        return "clang"
    else:
        return "vs" + vs_version

def _remove_flags_with_macros(flags: list) -> list:
    # Hacky way to find macros since regex sub is not available in bxl
    flags = [item for item in flags if "$(" not in item and ")" not in item]
    return dedupe_by_value(flags)

def _get_compiler_settings(platform: str) -> dict:
    cxxppflags = LANGUAGE_STANDARD_AND_TOOLSET_MAP[platform][CXXPPFLAGS]
    cxxflags = LANGUAGE_STANDARD_AND_TOOLSET_MAP[platform][CXXFLAGS]
    compiler_flags = cxxppflags.split(" ") + cxxflags.split(" ")
    compiler_flags = _remove_flags_with_macros(compiler_flags)
    return get_compiler_settings_from_flags(compiler_flags)

def _get_linker_settings(platform: str, buck_root: str) -> dict:
    ldflags = LANGUAGE_STANDARD_AND_TOOLSET_MAP[platform][LDFLAGS]
    linker_flags = ldflags.split(" ")
    linker_flags = _remove_flags_with_macros(linker_flags)
    return get_linker_settings_from_flags(linker_flags, buck_root)

def _get_provider_output_path(provider, bxl_ctx):
    default_outputs = provider.default_outputs
    if default_outputs:
        return get_path_without_materialization(default_outputs[0], bxl_ctx, abs = True)
    else:
        return None

def _get_path(target: str, bxl_ctx):
    target_node = bxl_ctx.configured_targets(target)
    providers = bxl_ctx.analysis(target_node).providers()
    absolute_path = _get_provider_output_path(providers[DefaultInfo], bxl_ctx)
    return absolute_path

def _main(bxl_ctx):
    platform = _get_platform(bxl_ctx.cli_args.vs_version_year)

    compiler_settings = _get_compiler_settings(platform)
    linker_settings = _get_linker_settings(platform, bxl_ctx.root())
    platform_toolset = LANGUAGE_STANDARD_AND_TOOLSET_MAP[platform][TOOLSET]

    # Set default language standard if not specified
    if "LanguageStandard" not in compiler_settings:
        compiler_settings["LanguageStandard"] = LANGUAGE_STANDARD_AND_TOOLSET_MAP[platform][LANGUAGE_STANDARD]

    # Overwrite configs for android projects
    if platform == ANDROID:
        compiler_settings.pop("LanguageStandard")

    compiler_settings_content = gen_compiler_settings(compiler_settings)
    linker_settings_content = gen_linker_settings(linker_settings)

    toolchains_props = ""
    if bxl_ctx.cli_args.fbsource and platform != ANDROID:
        toolchains_props = "    <Import Project=\"$(RepoRoot)\\third-party\\toolchains\\visual_studio\\toolchain.props\"/>"

    absolutize_path_exe = _get_path(ABSOLUTIZE_PATH_EXE, bxl_ctx)
    vs_buck_build_props_path = _get_path(VS_BUCK_BUILD_PROPS, bxl_ctx)
    vs_buck_build_props = """    <Import Project="{}"/>""".format(vs_buck_build_props_path)

    content = cmd_args(
        """<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
""",
        """    <Import Project="$(VCTargetsPath)\\Microsoft.Cpp.default.props" />""",
        h(
            "PropertyGroup",
            [
                h("PlatformToolset", platform_toolset, indent_level = 2),
                h("AbsolutizePathExe", absolutize_path_exe, indent_level = 2),
            ],
            indent_level = 1,
        ),
        """    <Import Project="$(VCTargetsPath)\\Microsoft.Cpp.props" />""",
        """    <ItemDefinitionGroup>""",
        compiler_settings_content,
        linker_settings_content,
        """    </ItemDefinitionGroup>""",
        """    <Import Condition="exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" Project="$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props"/>""",
        toolchains_props,
        """    <Import Project="$(VCTargetsPath)\\Microsoft.Cpp.Targets" />""",
        vs_buck_build_props,
        """</Project>""",
        delimiter = "\n",
    )

    actions = bxl_ctx.bxl_actions().actions
    artifact = actions.declare_output(get_mode_config_path(bxl_ctx.cli_args.mode_name))
    actions.write(artifact.as_output(), content, allow_args = True)
    bxl_ctx.output.print(bxl_ctx.output.ensure(artifact).abs_path())

main = bxl_main(
    impl = _main,
    cli_args = {
        "fbsource": cli_args.bool(
            default = False,
            doc = "Whether to turn on fbsource specific behaviors.",
        ),
        "mode_name": cli_args.string(
            doc = "Single mode file to generate projects for.",
        ),
        "vs_version_year": cli_args.string(
            default = "2022",
            doc = "Generate mode configs for Visual Studio <vs_version_year> projects",
        ),
    },
)
